export async function fetchApi(
    collection: string,
    forceUpdate: boolean = false // üëà par√°metro opcional para forzar actualizaci√≥n
) {
    const cacheKey = `strapi_${collection}`;

    // üîπ Reglas especiales: algunas colecciones siempre deben consultarse
    const alwaysFetch = ["articles"]; // puedes agregar m√°s: ["articles", "homepage", "settings"]

    // 1Ô∏è‚É£ Si no est√° en la lista de alwaysFetch y no se fuerza actualizaci√≥n
    if (!alwaysFetch.includes(collection) && !forceUpdate) {
        const cached = localStorage.getItem(cacheKey);
        if (cached) {
            try {
                const parsed = JSON.parse(cached);
                console.log(`‚úÖ Usando cach√© local para ${collection}`);
                return parsed;
            } catch {
                console.warn(`‚ö†Ô∏è Cach√© corrupto, se eliminar√°: ${cacheKey}`);
                localStorage.removeItem(cacheKey);
            }
        }
    }

    // 2Ô∏è‚É£ Si llega aqu√≠, consulta la API
    console.log(`üåê Consultando API Strapi para ${collection}`);

    try {
        const API_URL = import.meta.env.VITE_STRAPI_URL;
        const API_TOKEN = import.meta.env.VITE_STRAPI_TOKEN;

        const headersList = {
            "Accept": "application/json",
            "Authorization": API_TOKEN,
        };

        const res = await fetch(`${API_URL}api/${collection}?populate=*`, {
            method: "GET",
            headers: headersList,
        });

        if (!res.ok) throw new Error(`Error al obtener datos de ${collection}`);

        const data = await res.json();

        // 3Ô∏è‚É£ Guardar en cach√© si aplica
        if (!alwaysFetch.includes(collection)) {
            localStorage.setItem(cacheKey, JSON.stringify(data));
            console.log(`üíæ Cach√© actualizado para ${collection}`);
        } else {
            console.log(`üö´ No se almacena cach√© para ${collection}`);
        }

        return data;
    } catch (err) {
        console.error(`‚ùå Error en fetchApi(${collection}):`, err);
        return null;
    }
}




